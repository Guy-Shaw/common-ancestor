#! /usr/bin/perl -w
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
        if 0; #$running_under_some_shell

# Filename: common-ancestor
# Brief: Show the common ancestor directory of a set of pathnames
#
# Copyright (C) 2016 Guy Shaw
# Written by Guy Shaw <gshaw@acm.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

=pod

=begin description

Given a list of pathnames, show the common ancestor directory of them all.

The list of pathnames can come from @ARGV, itself, or from
files containing lists of filenames.

=end description

=cut

require 5.0;
use strict;
use warnings;
use Carp;
use diagnostics;
use Getopt::Long;
use File::Spec::Functions qw(splitpath);

my $eprint_fh;
my $dprint_fh;

my $debug   = 0;
my $verbose = 0;
my $argv    = 0;

my @exclude    = ();
my @exclude_re = ();

my @options = (
    'debug'        => \$debug,
    'verbose'      => \$verbose,
    'argv'         => \$argv,
    'exclude=s'    => \@exclude,
    'exclude-re=s' => \@exclude_re,
);

#:subroutines:#

# Decide how to direct eprint*() and dprint*() functions.
# If STDOUT and STDERR are directed to the same "channel",
# then eprint*() and dprint*() should be tied to the same file handle.
#
# Otherwise, buffering could cause a mix of STDOUT and STDERR to
# be written out of order.
#
sub set_print_fh {
    my @stdout_statv;
    my @stderr_statv;
    my $stdout_chan;
    my $stderr_chan;

    @stdout_statv = stat(*STDOUT);
    @stderr_statv = stat(*STDERR);
    $stdout_chan = join(':', @stdout_statv[0, 1, 6]);
    $stderr_chan = join(':', @stderr_statv[0, 1, 6]);
    if (!defined($eprint_fh)) {
        $eprint_fh = ($stderr_chan eq $stdout_chan) ? *STDOUT : *STDERR;
    }
    if (!defined($dprint_fh)) {
        $dprint_fh = ($stderr_chan eq $stdout_chan) ? *STDOUT : *STDERR;
    }
}

sub eprint {
    if (-t $eprint_fh) {
        print {$eprint_fh} "\e[01;31m\e[K", @_, "\e[m\e[K";
    }
    else {
        print {$eprint_fh} @_;
    }
}

sub eprintf {
    if (-t $eprint_fh) {
        print  {$eprint_fh}  "\e[01;31m\e[K";
        printf {$eprint_fh} @_;
        print  {$eprint_fh}  "\e[m\e[K";
    }
    else {
        printf {$eprint_fh} @_;
    }
}

sub dprint {
    print {$dprint_fh} @_ if ($debug);
}

sub dprintf {
    printf {$dprint_fh} @_ if ($debug);
}

sub common_prefix {
    my ($str1, $str2) = @_;
    my $l1 = length($str1);
    my $l2 = length($str2);
    my $maxlen = $l1 > $l2 ? $l1 : $l2;
    my $pos;

    for ($pos = 0; $pos < $maxlen; ++$pos) {
        if (substr($str1, $pos, 1) ne substr($str2, $pos, 1)) {
            return substr($str1, 0, $pos);
        }
    }

    return substr($str1, 0, $pos);
}

sub common_ancestor {
    my ($dir1, $dir2) = @_;
    my $pfx = common_prefix($dir1 . '/', $dir2 . '/');
    $pfx =~ s{/[^/]*\z}{}msx;
    return $pfx;
}

#:options:#

set_print_fh();

GetOptions(@options) or exit 2;

@exclude_re = map { qr{$_}; } @exclude_re;

#:main:#

my $ancestor;

# Is arg1 a directory prefix of arg2?
#
sub is_directory_prefix {
    my ($dir, $path) = @_;
    my $dir_pfx;
    my $path_pfx;

    $dir_pfx = $dir;
    $dir_pfx .= '/' unless ($dir_pfx =~ m{/$});
    $path_pfx = substr($path, 0, length($dir_pfx));
    return ($path_pfx eq $dir_pfx);
}

sub is_excluded {
    my ($path) = @_;

    for my $pfx (@exclude) {
        if (is_directory_prefix($pfx, $path)) {
            dprintf "Path excluded.\n";
            dprintf "  path=[${path}].\n";
            dprintf "  reason: excluded by directry prefix, '${pfx}'.\n";
            return 1;
        }
    }

    for my $re (@exclude_re) {
        if (m{$re}msx) {
            dprintf "Path excluded.\n";
            dprintf "  path=[${path}].\n";
            dprintf "  reason: excluded by regexp, '${re}'.\n";
            return 1;
        }
    }

    return 0;
}

sub add_path {
    my ($path) = @_;

    return if (is_excluded($path));

    # We are interested only in directories,
    # so, when one of the given paths is a regular file,
    # we use the directory component, only.
    #
    if (-f $_) {
        my ($vol, $dir, $sfn) = splitpath($_);
        $path = $dir;
    }
    else {
        $path = $_;
    }

    if (defined($ancestor)) {
        my $new_ancestor = common_ancestor($ancestor, $path);
        if ($new_ancestor ne '') {
            $ancestor = $new_ancestor;
        }
        else {
            print $ancestor, "\n";
            $ancestor = $path;
        }
    }
    else {
        $ancestor = $path;
    }
}

if ($argv) {
    for my $path (@ARGV) {
        add_path($path);
    }
}
else {
    while (<>) {
        my $path;
    
        chomp;
        s{\r\z}{}msx;
        add_path($_);
    }
}

print $ancestor, "\n";

exit 0;
